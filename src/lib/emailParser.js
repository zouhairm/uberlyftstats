/*eslint no-console: ["error", { allow: ["warn", "error"] }] */

global.atob = require("atob");
var stats = require("stats-lite")
var HTMLParser = require('node-html-parser');
// import { parse } from 'node-html-parser';


function msgBinayDataToTxt(b64data)
{
  return atob(b64data.replace(/-/g, '+').replace(/_/g, '/'));
}

const NULL_RIDE =  {taxi: '?', date: '?', date_email: '?',
                    total: NaN, currency: '?',
                    distance: NaN, distance_units: '?',
                    time_minutes: NaN}

export 
function parseEmail(queryResult) {


  if(! queryResult) return NULL_RIDE

  let emailPayload = queryResult.payload
  let emailDate = queryResult.internalDate

  if(! emailPayload) return NULL_RIDE

  //let's figure out whether we are dealing with a body or with parts!
  if('body' in emailPayload && emailPayload.body.size > 0)
  {
    if(emailPayload.mimeType == null)
    {
      console.error("This does not have a mimeType!", emailPayload)
      return NULL_RIDE
    }
    return parseEmail_(msgBinayDataToTxt(emailPayload.body.data),
                       emailPayload.mimeType,
                       emailDate)
  }
  else if('parts' in emailPayload && 'body' in emailPayload.parts[0])
  {
    //look for the html or plain one
    var part = emailPayload.parts.find(p => p.mimeType == 'text/html' || p.mimeType == 'text/plain');
    if(part) {
      return parseEmail_(msgBinayDataToTxt(part.body.data), 
                         part.mimeType,
                         emailDate)
    } else {
      console.warn('did not find any data in this email ??', emailPayload)
    }
  }


  return NULL_RIDE
}


function parseEmail_(emailBody, mimeType, emailDate)
{
  //If Html, parse it and get structured text out of it
  if (mimeType.includes('html')) {
    emailBody = HTMLParser.parse(emailBody).structuredText
  }

  let taxiRide = null

  if(emailBody.includes('Lyft') || emailBody.includes('lyft')) {
    taxiRide = parse_Lyft(emailBody)
  } else {
    taxiRide = parse_Uber(emailBody)
  }

  unifyUnits(taxiRide, emailDate)

  return taxiRide
}

function unifyUnits(ride, emailDate)
{
  //start with date
  try {
      ride.date_email = new Date(parseInt(emailDate))
  } catch(e) {
    console.error('failed to convert email date!', emailDate, e)
  }
  //force date to be email date!
  if (ride.date == '?') {
    ride.date = ride.date_email
  } else {
    ride.date = new Date(Date.parse(ride.date))
  }

  //start by distance
  let dist_conv = -1
  switch (ride.distance_units) {
    case 'mi':
    case 'Mi':
    case 'MI':
    case 'miles':
    case 'Miles':
        dist_conv = 1;
        break;

    case 'km':
    case 'Km':
    case 'KM':
    case 'kilometers':
    case 'Kilometers':
    case 'kiloMeters':
    case 'KiloMeters':
        dist_conv = 0.621371;
        break;

    default:
        console.warn('unkown distance unit ' + ride.distance_units)
  }

  let currency_conv = 0
  ride.currency = ride.currency.replace(':','').trim()
  switch (ride.currency) {
    case '$':
    case 'USD':
    case 'US$':
        currency_conv = 1; break;

    case 'CA$':
    case 'CAD':
        currency_conv = 0.77; break;

    case 'NZ':
    case 'Nz':
    case 'NZ$':
    case 'NZD':
        currency_conv = 0.68; break;

    case '£':
    case 'Â£':
    case 'GBP':
        currency_conv = 1.25; break

    case 'A$':
    case 'AUD':
        currency_conv = 0.71; break;  

    case 'EUR':
    case 'â¬':
        currency_conv = 1.13; break;  

    case 'Rs':
        currency_conv = 0.0057; break;


    default:
        console.warn('unkown currency unit ' + ride.currency)
  }

  ride.distance_miles = ride.distance * dist_conv
  ride.total_usd = ride.total * currency_conv

  ride.usd_per_mile = ride.total_usd / ride.distance_miles
}
// ************************************************************
// ************************************************************
                function parse_Lyft(emailBody)
// ************************************************************
// ************************************************************
{
  let lyftRide = Object.assign({}, NULL_RIDE)
  lyftRide.taxi = 'Lyft'

  try {
    try { //if the expensify string is there, get it!
      let r = /(\d{4}-\d{1,2}-\d{1,2}) ([A-z]*) ((?:\d*[.])?\d+) Taxi/
      let match = r.exec(emailBody);
      lyftRide.date = match[1]
      lyftRide.currency = match[2]
      lyftRide.total = parseFloat(match[3])

      //Odd, Lyft receipt sometimes is missing the decimal point
      if (!match[3].includes('.')) lyftRide.total /= 100

    } catch { //otherwise fall back to manual stuff
      try {
        let r = /(\w+\s+\d{1,2},\s+\d{4})/
        let match = r.exec(emailBody)
        lyftRide.date = new Date(Date.parse(match[1])).toISOString().split('T')[0]
      } catch { //nodate (well, no year), we will keep date unchanged
        // lyftRide.date = '?' 
      }

      //ugh - hacky :s
      try {
        r = /([A-z]*\W*[A-z]*)((?:\d*[.])?\d+)\W+Pickup/
        match = r.exec(emailBody)
        lyftRide.currency = match[1]
        lyftRide.total = parseFloat(match[2])
      } catch {
        r = /(?:Sub)?[T|t]otal(?: Fare| charged .+:)?\s*([A-z]*\W*[A-z]*)((?:\d*[.])?\d+)/
        match = r.exec(emailBody)
        lyftRide.total = parseFloat(match[2])
        lyftRide.currency = match[1]
      }
    }

    //get ride stats
    let r = /((?:\d*[.])?\d+)\s?(mi|km)\W+(?:(\d+)h)?\s?(?:(\d+)m)?\s?(?:(\d+)s)?/
    let match = r.exec(emailBody)
    lyftRide.distance = parseFloat(match[1])
    lyftRide.distance_units = match[2]

    let time_minutes = 0
    if(match[3]) time_minutes += parseFloat(match[3])*60
    if(match[4]) time_minutes += parseFloat(match[4])
    if(match[5]) time_minutes += parseFloat(match[5])/60
    lyftRide.time_minutes = time_minutes
  }
  catch (error){
    if(emailBody.includes('Lyft Line Discount'))
    {
      //lyft doesn't include mileage / time stats when lyft line?
      lyftRide.distance_units = 'mi'
      lyftRide.time_minutes = lyftRide.distance = NaN
    }
    else
    {
      console.warn('failed parsing a Lyft message!', emailBody, error)
    }
  }

  // if(lyftRide.date == '2017-06-22')
  // {
  //   console.log(emailBody)
  // }

  return lyftRide

}
// ************************************************************
// ************************************************************
                  function parse_Uber(emailBody)
// ************************************************************
// ************************************************************
{

  let uberRide = Object.assign({}, NULL_RIDE)
  uberRide.taxi = 'Uber'
  try {
    let r = /(\d+-\d+-\d+) ([A-z]*) ((?:\d*[.])?\d+) Taxi/
    let match = r.exec(emailBody);
    uberRide.date = match[1]
    uberRide.currency = match[2]
    uberRide.total = parseFloat(match[3])
  }
  catch (error1) { 
  try {
    // See Example here https://regexr.com/4hnc5
    //first get the total
    let r = /(?:Sub)?[T|t]otal(?: Fare| charged .+:)?\s*([A-z]*\W*[A-z]*)((?:\d*[.])?\d+)/
    let match = r.exec(emailBody)
    uberRide.total = parseFloat(match[2])
    uberRide.currency = match[1]
 

    //next get the distance
    try { //old style?
      r = /Distance[\W]+((?:\d*[.])?\d+)[\s]+([A-z]+)\n/
      match = r.exec(emailBody)
      uberRide.distance = parseFloat(match[1])
      uberRide.distance_units = match[2]

      //get the time of the trip
      r = /Duration[\W]+(?:(\d+)[\s]hours)?(?:[\W]+)?(?:(\d+)[\s]minutes)?(?:[\W]+)?(?:(\d+)[\s]seconds)?/
      match = r.exec(emailBody)
      let time_minutes = 0
      if(match[1]) time_minutes += parseFloat(match[1])*60
      if(match[2]) time_minutes += parseFloat(match[2])
      if(match[3]) time_minutes += parseFloat(match[3])/60
      uberRide.time_minutes = time_minutes 
    } catch { //New style ??
    try {
      //next get the time and distance
      // eslint-disable-next-line 
      r = /((?:\d*[.])?\d+)\s+([A-z]+)\s?[\||&]\s?(?:(\d+)\s+h)?\s?(?:(\d+)\s+min)?\s?(?:(\d+)\s+s)?/
      match = r.exec(emailBody)
      uberRide.distance = parseFloat(match[1])
      uberRide.distance_units = match[2]
      uberRide.time_minutes = match[3]
    } catch { //Europe ?
      //next get the time and distance
      r = /((?:\d*[.])?\d+)\W+(kilometers|miles)\W+(\d+:\d+:\d+)/
      match = r.exec(emailBody)
      uberRide.distance = parseFloat(match[1])
      uberRide.distance_units = match[2]

      let time_minutes = 0
      if(match[3]) time_minutes += parseFloat(match[3])*60
      if(match[4]) time_minutes += parseFloat(match[4])
      if(match[5]) time_minutes += parseFloat(match[5])/60
      uberRide.time_minutes = time_minutes
    }
    }

    //finally get the date of the trip
    try{
      r = /Trip Request Date[\W]+(\w+\s+\d{1,2},\s+\d{4})/
      match = r.exec(emailBody)
      uberRide.date = new Date(Date.parse(match[1])).toISOString().split('T')[0]
    }
    catch {
      //one last try for the date ..
      try
      {
        r = /(\w+\s+\d{1,2},\s+\d{4})/
        match = r.exec(emailBody)
        uberRide.date = new Date(Date.parse(match[1])).toISOString().split('T')[0]
      // eslint-disable-next-line 
      } catch {}
    }

  } catch (error2){
      if(!emailBody.includes('trip is canceled') && 
         !emailBody.includes('Previous Charge')) 
      {
        console.warn('failed parsing this Uber message!', emailBody, error2)
      }
    }
  }//2nd catch 

  // if(uberRide.distance_units.includes('Time'))
  // {
  //   console.log(emailBody)
  // }

  return uberRide
}



export function lumpRides(newRides, lumpedRides)
{
  //push new vals into the accumulator
  for(let i = 0; i < newRides.length; ++i)
  {
    let thisRide = newRides[i];
    let midMonth_time = new Date(Date.parse(thisRide.date.getFullYear()+'-'+(thisRide.date.getMonth()+1)+'-15'));
    midMonth_time = midMonth_time.getTime();

    [thisRide.taxi, 'Uber+Lyft'].forEach(taxi => { 
      if(!(taxi in lumpedRides)){
        lumpedRides[taxi] = {}
      } 

      if(!(midMonth_time in lumpedRides[taxi]))
      {
        lumpedRides[taxi][midMonth_time] = {distance_miles: [thisRide.distance_miles],
                                      total_usd: [thisRide.total_usd],
                                      usd_per_mile: [thisRide.usd_per_mile]}
      } else {
        ['distance_miles', 'total_usd', 'usd_per_mile'].forEach(k => {
          lumpedRides[taxi][midMonth_time][k].push(thisRide[k])
        })
      }
    })
  }

  //recompute stats
  void ['Uber', 'Lyft', 'Uber+Lyft'].forEach(taxi => {
    if(lumpedRides[taxi]){
      for (let month in lumpedRides[taxi])
      {
        ['distance_miles', 'total_usd', 'usd_per_mile'].forEach(k => {

            lumpedRides[taxi][month][k+'_mu'] = stats.mean(lumpedRides[taxi][month][k])
            lumpedRides[taxi][month][k+'_sigma'] = stats.stdev(lumpedRides[taxi][month][k])
            lumpedRides[taxi][month][k+'_mu_sigma'] = lumpedRides[taxi][month][k+'_sigma']/lumpedRides[taxi][month][k].length
          })
      }
    }
  })
  // console.log(lumpedRides)

}

// // var body64 = ""
// var body64 = "CgoKClJlY2VpcHQKClRoYW5rcyBmb3IgcmlkaW5nIFViZXIhCgpCaWxsZWQgVG86IFpvdWhhaXIgTWFoYm91YmkKCkRyaXZlcjogQWJyYWhhbQoKClRyaXAgUmVxdWVzdCBEYXRlOgogICAgRGVjZW1iZXIgIDEsIDIwMTMgYXQgMDg6MjFwbQpQaWNrdXAgTG9jYXRpb246CiAgICAxNTUwLTE1NzIgQWlycG9ydCBCb3VsZXZhcmQsIE1pbmV0YSBTYW4gSm9zZSBJbnRlcm5hdGlvbmFsIEFpcnBvcnQgKFNKQyksIFNhbiBKb3NlLCBDQQoKRHJvcG9mZiBMb2NhdGlvbjoKICAgIDI1NjE3IEVsZW5hIFJvYWQsIExvcyBBbHRvcyBIaWxscywgQ0EKClBheW1lbnQ6CiAgICBHb29nbGUgV2FsbGV0CgoKRkFSRSBCUkVBS0RPV04KCiAgICBDaGFyZ2VzCiAgICAgICAgQmFzZSBGYXJlOiAgICAkMy41MAogICAgICAgIERpc3RhbmNlOiAgICAkNDQuMTEKICAgICAgICBUaW1lOiAgICAkMS4xNgogICAgICAgIENoYXJnZSBzdWJ0b3RhbDogICAgJDQ4Ljc3CgogICAgRGlzY291bnRzCiAgICAgICAgUm91bmRpbmcgRG93bjogICAgKCQwLjc3KQogICAgICAgIFNWTE9WRVN1YmVyWCAoJDMwIG9mZiBTaWxpY29uIFZhbGxleSB0cmlwcykuIE9mZmVyIHZhbGlkIG9ubHkgb24gdWJlclggdHJpcHMgMTEuMjUuMTMgLSAxMi4xLjEzOiAgICAoJDMwLjAwKQogICAgICAgIERpc2NvdW50IHN1YnRvdGFsOiAgICAoJDMwLjc3KQoKCiAgICBUb3RhbHMKICAgICAgICBUb3RhbCBGYXJlOiAgICAkMTguMDAKICAgICAgICBBbW91bnQgQ2hhcmdlZDogICAgKCQxOC4wMCkKICAgICAgICBPdXRzdGFuZGluZyBCYWxhbmNlOiAgICAkMC4wMAoKVFJJUCBTVEFUSVNUSUNTCgpEaXN0YW5jZTogICAgMTYuMTggbWlsZXMKCkR1cmF0aW9uOiAgICAxOSBtaW51dGVzLCAzIHNlY29uZHMKCkF2ZXJhZ2UgU3BlZWQ6ICAgIDUwLjk3IG1pbGVzIHBlciBob3VyCgpOZWVkIHN1cHBvcnQ_IFJlcGx5IHRvIHRoaXMgcmVjZWlwdC4KClZpZXcgdGhpcyB0cmlwIG9ubGluZTogaHR0cHM6Ly9jbGllbnRzLnViZXIuY29tLyMhL3RyaXAvcGNtcmRnamkKeGlkcGNtcmRnamkKCiAgICBVYmVyIFRlY2hub2xvZ2llcywgSW5jLgogICAgMTgyIEhvd2FyZCBTdCAjOAogICAgU2FuIEZyYW5jaXNjbywgQ0EgOTQxMDIK"
// var resb = {body: {data: body64, size:1}}
// console.log(parseEmail(resb))

// let res = `Receipt

// Thanks for riding Uber!

// Billed To: Zouhair Mahboubi

// Driver: joseph



// Trip Request Date:
//     October 24, 2013 at 07:01pm
// Pickup Location:
//     342 Townsend Street, San Francisco, CA

// Dropoff Location:
//     355-415 Van Ness Avenue, San Francisco, CA

// Credit Card:
//     Google Wallet

//     Notes
//     This trip has an increased fare because it was taken while surge pricing was in effect.

// FARE BREAKDOWN

//     Charges
//         Base Fare:    $3.50
//         Distance:    $4.04
//         Time:    $4.21
//         Surge x1.5:    $5.88
//         Charge subtotal:    $17.63

//     Discounts
//         Rounding Down:    ($0.63)
//         Discount subtotal:    ($0.63)


//     Totals
//         Total Fare:    $17.00
//         Billed to Card:    ($17.00)
//         Outstanding Balance:    $0.00

// TRIP STATISTICS

// Distance:    1.88 miles

// Duration:    11 minutes, 55 seconds

// Average Speed:    9.46 miles per hour

// Need support? Reply to this receipt.

// View this trip online: https://clients.uber.com/#!/trip/hu7wsedf
// xidhu7wsedf

//     Uber Technologies, Inc.
//     182 Howard St #8
//     San Francisco, CA 94102`

// console.log(parse_Uber(res))




