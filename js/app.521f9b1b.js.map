{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/App.vue?4241","webpack:///./src/App.vue?6f48","webpack:///./src/components/GraphPage.vue?5e1a","webpack:///src/components/GraphPage.vue","webpack:///./src/components/GraphPage.vue?77be","webpack:///./src/components/GraphPage.vue?53ea","webpack:///./src/lib/gmail.js","webpack:///src/App.vue","webpack:///./src/App.vue?1160","webpack:///./src/App.vue?bff9","webpack:///./src/main.js","webpack:///./src/lib/emailParser.js","webpack:///./src/components/GraphPage.vue?557d"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","app","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_6_oneOf_1_0_node_modules_css_loader_index_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0__","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_6_oneOf_1_0_node_modules_css_loader_index_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0___default","Appvue_type_template_id_a65f7e5c_render","_vm","this","_h","$createElement","_c","_self","attrs","id","parsedRideData","fetchedData","staticClass","_v","_m","href","title","on","click","$event","preventDefault","showAbout","_e","doLoginOrOut","_s","loginText","loginHoverText","doFetch","staticRenderFns","staticStyle","text-align","target","GraphPagevue_type_template_id_01a99176_scoped_true_render","perMileData","layout","perMileLayout","GraphPagevue_type_template_id_01a99176_scoped_true_staticRenderFns","arraySort","GraphPagevue_type_script_lang_js_","components","PlotlyVue","vue_plotly_umd","mounted","permilePlot","document","querySelector","eventdata","points","curveNumber","lib_default","a","Fx","hover","pointNumber","created","titlefont","size","color","family","font","legend","orientation","xanchor","x","y","hovermode","paper_bgcolor","plot_bgcolor","margin","b","pad","dragmode","clickmode","yaxis","domain","anchor","showticklabels","ticks","tickfont","yaxis2","yaxis3","xaxis","xaxis2","xaxis3","props","watch","deep","immediate","handler","newParsedData","_olddata","_this$perMileData","_this$perMileData2","allRides","splitify","toConsumableArray","metric","dataTraces","lumpedRides","taxiCompanies","forEach","taxi_color","taxi","rides","filter","dataTrace","map","date","legendgroup","showlegend","marker","opacity","hoverinfo","text","usd_per_mile","toFixed","total_usd","distance_miles","months_time","keys","parseInt","month_means_pairs","assign","month_time","mu","means","mmp","sigmas","months","Date","_dataTrace","visible","line","shape","smoothing","f","upper","v","lower","Math","max","y_err","concat","reverse","months_and_rev","fill","fillcolor","components_GraphPagevue_type_script_lang_js_","component","componentNormalizer","GraphPage","Queue","require","DEBUG","SEARCH_QUERY","MAX_BATCH_SIZE","MAX_NUM_EMAILS","MAX_EMAILS_PER_PAGE","THROTTLE_TIMEOUT","fetchMetaData","gapi","output","emailsQueue","doneSearching","doneParsing","msgIdsQueue","parsedData","batchesAwaiting","initialQuery","userId","maxResults","includeSpamTrash","q","getMessages","parseEmailsQueue","publishData","isEmpty","setTimeout","batchSize","httpBatch","client","newBatch","msgId","dequeue","fetchQuery","gmail","users","messages","fields","add","then","res","handleBatchResponse","rej","console","error","k","enqueue","parseEmail","_output$allRides","batchedData","lumpRides","query","nEmails","arguments","undefined","request","list","execute","nextPageToken","newquery","pageToken","Appvue_type_script_lang_js_","GoogleUser","signedIn","$isAuthenticated","gapiClient","_this","$getGapiClient","computed","methods","_this2","$logout","$login","catch","src_Appvue_type_script_lang_js_","App_component","App","Vue","config","productionTip","apiKey","process","clientId","Error","gAPIConfig","scope","discoveryDocs","use","VueGAPI","render","h","$mount","global","atob","stats","HTMLParser","msgBinayDataToTxt","b64data","replace","NULL_RIDE","date_email","total","NaN","currency","distance","distance_units","time_minutes","queryResult","emailPayload","payload","emailDate","internalDate","body","mimeType","parseEmail_","parts","part","find","warn","emailBody","includes","parse","structuredText","taxiRide","parse_Lyft","parse_Uber","unifyUnits","ride","e","dist_conv","currency_conv","trim","lyftRide","match","exec","parseFloat","_unused","toISOString","split","_unused2","_unused3","uberRide","error1","_unused4","_unused5","_unused6","_unused7","error2","newRides","_loop","thisRide","midMonth_time","getFullYear","getMonth","getTime","_loop2","month","mean","stdev","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_6_oneOf_1_0_node_modules_css_loader_index_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_GraphPage_vue_vue_type_style_index_0_id_01a99176_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_6_oneOf_1_0_node_modules_css_loader_index_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_GraphPage_vue_vue_type_style_index_0_id_01a99176_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default"],"mappings":"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","file":"js/app.521f9b1b.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import mod from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&lang=css&\"; export default mod; export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&lang=css&\"","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"app\"}},[_c('GraphPage',{attrs:{\"parsedRideData\":_vm.fetchedData}}),(_vm.showAbout)?_c('div',{staticClass:\"about-box\",attrs:{\"id\":\"about\"}},[_c('h2',[_vm._v(\"About Project\")]),_vm._m(0),_c('a',{staticClass:\"close-about\",attrs:{\"href\":\"#\",\"title\":\"Close this message\"},on:{\"click\":function($event){$event.preventDefault();_vm.showAbout = false}}},[_vm._v(\"Close\")])]):_vm._e(),_c('div',{staticClass:\"footer\"},[_c('a',{staticClass:\"about-link\",on:{\"click\":function($event){$event.preventDefault();_vm.showAbout = !_vm.showAbout}}},[_vm._v(\"About\")]),_vm._m(1)]),_c('div',{staticClass:\"header\"},[_c('a',{staticClass:\"login-link\",on:{\"click\":function($event){$event.preventDefault();return _vm.doLoginOrOut($event)}}},[_vm._v(_vm._s(_vm.loginText))]),_c('span',{staticClass:\"tooltiptext\"},[_vm._v(_vm._s(_vm.loginHoverText))]),(_vm.signedIn)?_c('a',{staticClass:\"fetch-link\",on:{\"click\":function($event){$event.preventDefault();return _vm.doFetch($event)}}},[_vm._v(\"Fetch\")]):_vm._e()])],1)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticStyle:{\"text-align\":\"left\"}},[_c('p',[_vm._v(\"\\n        This project aims to visualize lyft/uber rides by crawling email receipts.\"),_c('br'),_vm._v(\"\\n\\n        You can see a sample of what the data looks like from my account. If you would like to visualize your own data, click on the top right button to authenticate with Google and the app will fetch your data.\"),_c('br')]),_c('p',[_vm._v(\"\\n          This app is made possible thanks to the following packages:\\n          \"),_c('ul',[_c('li',[_c('a',{attrs:{\"target\":\"_blank\",\"href\":\"https://github.com/vuejs/awesome-vue\"}},[_vm._v(\"Vue.js\")])]),_c('li',[_c('a',{attrs:{\"target\":\"_blank\",\"href\":\"https://plot.ly/javascript\"}},[_vm._v(\"Plotly.js\")])]),_c('li',[_c('a',{attrs:{\"target\":\"_blank\",\"href\":\"https://david-desmaisons.github.io/vue-plotly/\"}},[_vm._v(\"Vue-Plotly\")])])]),_vm._v(\"\\n\\n          For more technical details, check out this \"),_c('a',{attrs:{\"target\":\"_blank\",\"href\":\"https://zouhairm.github.io/lyftuber\"}},[_vm._v(\"Blog Post\")])]),_c('p',{staticClass:\"privacy-note\"},[_vm._v(\"\\n        Note on Privacy and Data: The application relies on Google's OAuth2 workflow to access the emails, and therefore your login/password information is never shared with it either. Moreover, this application is \"),_c('em',[_vm._v(\"entirely\")]),_vm._v(\" client side. This means that your data is not sent to a 3rd party server nor is it saved anywhere.\\n        \")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',{staticClass:\"copyText\"},[_vm._v(\"\\n        Made during late night hours by \"),_c('a',{attrs:{\"target\":\"_blank\",\"href\":\"https://zouhairm.github.io/bio\"}},[_vm._v(\"Zouhair M\")])])}]\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"graphs\"},[_c('div',{staticClass:\"permile-graph\"},[_c('PlotlyVue',{attrs:{\"data\":_vm.perMileData,\"layout\":_vm.perMileLayout}})],1)])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  \n  <div class=\"graphs\">\n\n    <div class=\"permile-graph\">\n      <PlotlyVue :data=\"perMileData\" :layout=\"perMileLayout\" ></PlotlyVue>  \n    </div> \n<!-- \n    <div class=\"dist-cost-graph\">\n      <Plotly :data=\"distanceData\" :layout=\"distanceLayout\" ></Plotly>\n      <Plotly :data=\"costData\" :layout=\"costLayout\" ></Plotly>\n    </div> -->\n\n  </div>\n\n</template>\n\n<script>\nimport { Plotly as  PlotlyVue } from 'vue-plotly'\nimport Plotly from 'plotly.js'\n\nvar arraySort = require('array-sort');\n\n\nexport default {\n  name: 'GraphPage',\n  components: {\n    PlotlyVue\n  },\n  data()\n  {\n    return {\n      perMileData: [],\n      perMileLayout: {},\n    }\n  },\n  mounted(){\n    var permilePlot = document.querySelector('.permile-graph .js-plotly-plot')\n    permilePlot.on('plotly_hover', function (eventdata){\n      // console.log('curvenumber: ',  eventdata.points[0].curveNumber);\n      let c = eventdata.points[0].curveNumber\n      Plotly.Fx.hover(permilePlot,\n              [\n                { curveNumber: c, pointNumber:eventdata.points[0].pointNumber },\n                { curveNumber: c+8, pointNumber:eventdata.points[0].pointNumber },\n                { curveNumber: c+8*2, pointNumber:eventdata.points[0].pointNumber },\n              ],\n                ['xy', 'x2y2', 'x3y3']\n      );\n    });\n  },\n  created() {\n    this.perMileLayout = {  \n      // title: 'Trip Cost/Mile',\n      titlefont: {\n          'size': 16,\n          'color': '#ffffff',\n          'family': 'Open Sans'\n      },            \n      font: {'color': '#fff',},\n      legend: {'orientation':'h', 'xanchor': 'center', 'x': 0.5, 'y':1 },\n      hovermode: 'closest',\n      paper_bgcolor: 'rgba(0,0,0,0)',\n      plot_bgcolor: 'rgba(0,0,0,0)',\n      margin:{'t': 40, 'b':40 , 'r':0, 'l': 50, 'pad': 1},\n      dragmode:'select',\n      clickmode: 'event+select',\n      yaxis: {\n          domain: [0.55, 1], anchor: 'x',\n          title: '$/Mile',\n          showticklabels: true,\n          ticks:'',\n          tickfont: {'color':'white'},\n          titlefont:{'color':'white'}\n      },  \n      yaxis2: {\n          domain: [0, 0.45], anchor: 'x2',\n          title: '$',\n          showticklabels: true,\n          ticks:'',\n          tickfont: {'color':'white'},\n          titlefont:{'color':'white'}\n      },    \n      yaxis3: {\n          domain: [0, 0.45], anchor: 'x3',\n          title: 'Miles',\n          showticklabels: true,\n          ticks:'',\n          tickfont: {'color':'white'},\n          titlefont:{'color':'white'}\n      },      \n      xaxis: {\n          domain: [0, 1], anchor: 'y',\n          showticklabels: true,\n          ticks:'',\n          tickfont: {'color':'white'},\n          titlefont:{'color':'white'}\n      },      \n      xaxis2: {\n          domain: [0, 0.45], anchor: 'y2',\n          showticklabels: true,\n          ticks:'',\n          tickfont: {'color':'white'},\n          titlefont:{'color':'white'}\n      },      \n      xaxis3: {\n          domain: [0.55, 1], anchor: 'y3',\n          showticklabels: true,\n          ticks:'',\n          tickfont: {'color':'white'},\n          titlefont:{'color':'white'}\n      },\n    }\n\n\n  },\n\n\n  props: ['parsedRideData'],\n  watch:\n  {\n    parsedRideData:\n    {\n      deep: true,\n      immediate: true,\n      handler(newParsedData, _olddata) /* eslint-disable-line no-unused-vars */\n      {\n        if(newParsedData && newParsedData.allRides != null && newParsedData.allRides.length > 0)\n        {\n          this.perMileData       = splitify(newParsedData, 'usd_per_mile'  , '')\n          this.perMileData.push(...splitify(newParsedData, 'total_usd'     , '2'))\n          this.perMileData.push(...splitify(newParsedData, 'distance_miles', '3'))\n        }\n        else\n        {\n            this.perMileData= []\n        }\n      }\n    }\n  }\n}\n\nfunction splitify(parsedRideData, metric, i)\n{\n  let dataTraces = []\n  let allRides = parsedRideData.allRides\n  let lumpedRides = parsedRideData.lumpedRides\n\n  //TODO: should really be a config ...\n  const taxiCompanies = [['Lyft', '#ea0a8b'], ['Uber', '#000000'], ['Uber+Lyft', '#00ffff']]\n\n  taxiCompanies.forEach(taxi_color => {\n    let taxi =taxi_color[0]\n    let color = taxi_color[1]\n\n    let rides = allRides.filter(r => r && 'taxi' in r && r.taxi == taxi)\n\n    if(rides.length > 0)\n    {\n      let dataTrace = {x: rides.map(r => r.date),\n                       y: rides.map(r => r[metric]),\n                       xaxis: 'x'+i, yaxis: 'y'+i,\n                       legendgroup: taxi, showlegend: i == 0,\n                       name: taxi, mode: 'markers', marker: {color: color, opacity: .4},\n                       }\n\n      // if(metric == 'total_usd') //just for debugging ...\n      // {\n      //   dataTrace.text = rides.map(r => JSON.stringify(r))\n      // }\n\n      if(metric == 'usd_per_mile')\n      {\n        dataTrace.hoverinfo = 'text';\n        dataTrace.text = rides.map(r => r.usd_per_mile.toFixed(2) + ' $/mile ($' + r.total_usd + ' in ' + r.distance_miles + ' miles)')\n      }\n\n      dataTraces.push(dataTrace)\n    }\n\n    //Now deal with stats\n    if(lumpedRides && (taxi in lumpedRides))\n    {\n      let months_time = Object.keys(lumpedRides[taxi]).map(m=>parseInt(m)) //should be months in time int\n      \n      //ugh, no argsort :(\n      let month_means_pairs  = months_time.map(m => Object.assign({},\n                                {month_time: m, \n                                 mu: lumpedRides[taxi][m][metric+'_mu'],\n                                 s: lumpedRides[taxi][m][metric+'_sigma']})) \n\n      month_means_pairs = arraySort(month_means_pairs, 'month_time')\n\n      let means  = month_means_pairs.map(mmp => mmp.mu)\n      let sigmas = month_means_pairs.map(mmp => mmp.s)\n      let months = month_means_pairs.map(mmp => new Date(mmp.month_time)) \n\n\n      let dataTrace = {x: months, y: means, visible: taxi == 'Uber+Lyft' ? 'legendonly' : true,\n                       xaxis: 'x'+i, yaxis: 'y'+i,\n                      legendgroup:taxi+'_stats', showlegend: i == 0,\n                       name: taxi + ' Mean', mode: 'lines', line: {shape:'spline', smoothing: .4,\n                       color: color + '88'}\n                      }\n\n      if(metric == 'usd_per_mile')\n      {\n        dataTrace.hoverinfo = 'text';\n        dataTrace.text = dataTrace.y.map(y => 'Average: ' + y.toFixed(2) + ' $/mile')\n      }\n      dataTraces.push(dataTrace)\n      \n\n      const f = 1.5;\n      let upper = means.map(function (v, i) {return v + f*this[i];}, sigmas);\n      let lower = means.map(function (v, i) {return Math.max(0, v - f*this[i]);}, sigmas);\n      let y_err = upper.concat(lower.reverse())\n      let months_and_rev = months.concat(months.slice().reverse())\n\n      dataTrace = {x: months_and_rev, y: y_err, visible: taxi == 'Uber+Lyft' ? 'legendonly' : true,\n                 xaxis: 'x'+i, yaxis: 'y'+i, showlegend: false, hoverinfo: 'none', legendgroup:taxi+'_stats',\n                 fill:'toself', fillcolor:color + '55',\n                 name: taxi+'_err', mode: 'lines', line: {shape:'spline', smoothing: .4,\n                 color: color + '55'}\n                }\n      dataTraces.push(dataTrace)\n      \n\n      // dataTrace = {x: months, y: lower, \n      //              xaxis: 'x'+i, yaxis: 'y'+i, showlegend: false, hoverinfo: 'none', legendgroup:taxi+'_stats',\n      //              name: taxi+'_lower', mode: 'lines', line: {//shape:'spline', \n      //              color: color + '55', opacity: .5}\n      //             }\n      // dataTraces.push(dataTrace)\n    } \n\n  })\n\n  return dataTraces\n}\n\n\n\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n\n.permile-graph .js-plotly-plot{\n  height: 87vh;\n  margin: 0 0; \n}\n\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\n\n</style>\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GraphPage.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GraphPage.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./GraphPage.vue?vue&type=template&id=01a99176&scoped=true&\"\nimport script from \"./GraphPage.vue?vue&type=script&lang=js&\"\nexport * from \"./GraphPage.vue?vue&type=script&lang=js&\"\nimport style0 from \"./GraphPage.vue?vue&type=style&index=0&id=01a99176&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"01a99176\",\n  null\n  \n)\n\nexport default component.exports","/**\n * Implements Gmail API search.\n * We will search for uber/lyft emails, and parse \n * them into some interesting meta data ... \n */\n\nvar Queue = require(\"queue-fifo\");\n\n\n\nconst DEBUG = false;\n\n\n// const SEARCH_QUERY = 'from: \"Lyft Ride Receipt\" OR from: \"uber receipt\" OR subject: \"Uber Ride Receipt\"'\n// const SEARCH_QUERY = 'from: \"lyft ride receipt\" before:2016' \nconst SEARCH_QUERY = 'from: \"Lyft Ride Receipt\" OR from: \"uber receipts\" OR subject: \"Uber Ride Receipt\"'\n\nvar MAX_BATCH_SIZE = 25;\n\nvar MAX_NUM_EMAILS = 10000;\nvar MAX_EMAILS_PER_PAGE = 200;\nvar THROTTLE_TIMEOUT = 200;\n\nif (DEBUG)\n{\n  MAX_NUM_EMAILS = 25;\n  MAX_EMAILS_PER_PAGE = 25;\n}\n\nimport {parseEmail, lumpRides} from './emailParser.js'\n\nexport function fetchMetaData(gapi, output) {\n\n  //this is the queue where we will store data\n  let emailsQueue = {doneSearching: false, doneParsing: false, \n                     msgIdsQueue: new Queue(), \n                     parsedData: new Queue(), batchesAwaiting: 0}\n\n  let initialQuery = {userId: 'me', maxResults: MAX_EMAILS_PER_PAGE, includeSpamTrash: true,\n                      q: SEARCH_QUERY, \n                      }\n  getMessages(gapi, initialQuery, emailsQueue)\n\n  //getMessages will return since it's async.\n  //We call another async function which will keep updating\n  //output as more things are pushed in the queue!\n  parseEmailsQueue(gapi, emailsQueue)\n\n\n  Object.assign(output, {allRides: [], lumpedRides: {}})\n  publishData(emailsQueue, output)\n}\n\n\nfunction parseEmailsQueue(gapi, emailsQueue)\n{\n  //getMessages signaled it's done and the queue is empty, so done!\n  if (emailsQueue.doneSearching && emailsQueue.msgIdsQueue.isEmpty())\n  {\n    if(emailsQueue.batchesAwaiting > 0)\n    {\n      //console.log('emptied list queue, but still waiting on ' + emailsQueue.batchesAwaiting + ' batches to finis')\n      setTimeout(()=> parseEmailsQueue(gapi, emailsQueue), 3*THROTTLE_TIMEOUT)\n    }\n    else\n    {\n      emailsQueue.doneParsing = true\n    }\n    return;\n  }\n\n  //pop up to 20 messages from the queue, setup a query, and send result to parser\n\n  let batchSize = 0;\n  let httpBatch = gapi.client.newBatch();\n  while(! emailsQueue.msgIdsQueue.isEmpty() && batchSize < MAX_BATCH_SIZE)\n  {\n    let msgId = emailsQueue.msgIdsQueue.dequeue()\n    let fetchQuery = gapi.client.gmail.users.messages.get({\n        userId: 'me', \n        id: msgId,\n        fields: 'internalDate,payload(body, mimeType, parts)',\n      })\n    httpBatch.add(fetchQuery, {id: ('get ' + msgId)});\n    batchSize++;\n  }\n  if(batchSize > 0){\n    emailsQueue.batchesAwaiting += 1\n    //console.log('pushed a bunch of requests! batchSize ' + batchSize + ' - total batches =', emailsQueue.batchesAwaiting )\n    httpBatch.then( (res) => handleBatchResponse(res, emailsQueue),\n                    // eslint-disable-next-line \n                    (rej) => {console.error(\"REJECTED!\", rej), emailsQueue.batchesAwaiting -= 1;})\n  }\n\n  //Recurse (but with a timeout to throttle things ...)\n  setTimeout(()=> parseEmailsQueue(gapi, emailsQueue), THROTTLE_TIMEOUT)\n}\n\nfunction handleBatchResponse(res, emailsQueue)\n{\n  for (let k in res.result){\n    emailsQueue.parsedData.enqueue(parseEmail(res.result[k].result))\n  }\n  emailsQueue.batchesAwaiting -= 1\n  //console.log('Got results! (batches waiting: ' + emailsQueue.batchesAwaiting , res)\n}\n\nfunction publishData(emailsQueue, output)\n{\n  //getMessages signaled it's done and the queue is empty, so done!\n  if (emailsQueue.doneParsing  && emailsQueue.parsedData.isEmpty())\n  {\n    //console.log('emptied parsed queue')\n    return;\n  }\n\n  //push a stack of 10 at a time\n  let batchedData = []\n  while(! emailsQueue.parsedData.isEmpty() && batchedData.length < MAX_BATCH_SIZE)\n  {\n    batchedData.push(emailsQueue.parsedData.dequeue())\n  }\n  if(batchedData.length > 0)\n  {\n    output.allRides.push(...batchedData)\n    lumpRides(batchedData, output.lumpedRides)    \n  }\n\n\n  //Recurse (but with a timeout to throttle things ...)\n  setTimeout(()=> publishData(emailsQueue, output), THROTTLE_TIMEOUT)\n}\n\n\n\nfunction getMessages(gapi, query, emailsQueue, nEmails = 0)\n{\n  //console.log('going to execute a request: ', query)\n  let request = gapi.client.gmail.users.messages.list(query)\n\n\n  request.execute(res => {\n      // //console.log('received a response from gmail :D !', res)\n\n      //put messages received into the queue\n      res.messages.forEach(m => emailsQueue.msgIdsQueue.enqueue(m.id))\n      nEmails += res.messages.length\n\n      //Recurse to get the next page of results\n      if (res.nextPageToken && nEmails < MAX_NUM_EMAILS) {\n        let newquery = Object.assign({}, query)\n        newquery.pageToken= res.nextPageToken\n\n        getMessages(gapi, newquery, emailsQueue, nEmails)\n      }\n      else\n      {\n        // //console.log('got them all!')\n        emailsQueue.doneSearching = true\n      }\n  })\n}\n","<template>\n  <div id=\"app\">\n\n    <GraphPage :parsedRideData='fetchedData'/>\n\n    <div id='about' class='about-box' v-if='showAbout'>\n      <h2>About Project</h2>\n      <div style='text-align: left'>\n          <p>\n          This project aims to visualize lyft/uber rides by crawling email receipts.<br>\n\n          You can see a sample of what the data looks like from my account. If you would like to visualize your own data, click on the top right button to authenticate with Google and the app will fetch your data.<br>\n          </p>\n\n          <p>\n            This app is made possible thanks to the following packages:\n            <ul>\n                <li><a target=\"_blank\" href=\"https://github.com/vuejs/awesome-vue\">Vue.js</a></li>\n                <li><a target=\"_blank\" href=\"https://plot.ly/javascript\">Plotly.js</a></li>\n                <li><a target=\"_blank\" href=\"https://david-desmaisons.github.io/vue-plotly/\">Vue-Plotly</a></li>\n            </ul>\n\n            For more technical details, check out this <a target=\"_blank\" href=\"https://zouhairm.github.io/lyftuber\">Blog Post</a>\n          </p>\n\n          <p class='privacy-note'>\n          Note on Privacy and Data: The application relies on Google's OAuth2 workflow to access the emails, and therefore your login/password information is never shared with it either. Moreover, this application is <em>entirely</em> client side. This means that your data is not sent to a 3rd party server nor is it saved anywhere.\n          </p>\n      </div>\n      <a href='#' @click.prevent='showAbout = false'  class='close-about' title='Close this message'>Close</a>\n  </div>\n\n  <div class='footer'>\n      <a @click.prevent='showAbout = !showAbout' class='about-link'>About</a>\n      <p class='copyText'>\n          Made during late night hours by <a target=\"_blank\" href=\"https://zouhairm.github.io/bio\">Zouhair M</a>\n      </p>\n  </div>\n\n  <div class='header'>\n      <a @click.prevent='doLoginOrOut' class='login-link' >{{loginText}}</a>\n      <span class=\"tooltiptext\">{{loginHoverText}}</span>\n\n      <a @click.prevent='doFetch' v-if='signedIn' class='fetch-link' >Fetch</a>\n  </div>\n\n  </div>\n</template>\n\n<script>\n/*eslint no-console: [\"error\", { allow: [\"warn\", \"error\"] }] */\nimport GraphPage from './components/GraphPage.vue'\nimport {fetchMetaData} from './lib/gmail.js'\nexport default {\n  name: 'app',\n\n  data() {\n    return {\n      showAbout: true || window.location.hash.includes('privacy'),\n      fetchedData: {allRides: []},\n      GoogleUser: null,\n      signedIn: this.$isAuthenticated(),\n      gapiClient: null,\n    };\n  },\n  created(){\n    if (this.signedIn)\n    {\n      this.$getGapiClient().then(gapi => {\n        this.gapiClient = gapi;\n        fetchMetaData(gapi, this.fetchedData);\n      });\n    }\n  },\n\n  components: {\n    GraphPage\n  },\n\n  computed: {\n    loginText(){\n      return this.signedIn ? \"Logout\" : \"Login\"\n    },\n    loginHoverText(){\n      if(this.signedIn)\n      {\n        return \"Click To Logout\"\n      }\n      else\n      {\n        return \"Click to Login using Google\"\n      }\n    }\n  },\n\n  methods: {\n    doFetch(){\n      if(this.gapiClient){\n        fetchMetaData(this.gapiClient, this.fetchedData);\n      }\n    },\n    doLoginOrOut(){\n      if(this.signedIn) {\n        this.$logout();\n        this.signedIn = false;\n        this.fetchedData = {allRides: []};\n        this.gapiClient = null;\n      }\n      else {\n        this.$login()\n        .then(() => {\n          // On success nothing to do ... \n          this.signedIn = this.$isAuthenticated()\n          this.$getGapiClient().then(gapi => {\n            this.gapiClient = gapi;\n            fetchMetaData(gapi, this.fetchedData);\n          });\n        })\n        .catch(error  => {\n          console.error('Failed to login! ', error)\n        })\n      }\n\n\n    },\n\n  }\n}\n\n</script>\n\n<style>\nbody{\n  background-color: black;\n}\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 50px;\n  background-color: #505050;\n}\n\na {\n  color: rgb(53, 162, 162);\n  text-decoration: none;\n  text-align: center;\n  padding: 0 4px\n}\n\n\n.about-box {\n  position: absolute;\n  left: 30%;\n  padding: 14px;\n  top: 64px;\n  width: 40%;\n  background: rgba(255, 255, 255, 0.9) url(\"./assets/logo.png\") no-repeat center;\n  background-blend-mode: lighten;\n  background-position-y: top;\n  border-radius: 5%;\n  box-shadow: 0 2px 4px rgba(0,0,0,.2), 0 -1px 0 rgba(0,0,0,.02);\n  z-index: 1;\n\n}\n.privacy-note {\n  font-size: smaller;\n}\n\n.close-about {\n  float: right;\n  margin-right: 14px;\n  font-size: 12px;\n  font-weight: bold;\n  color: blue;\n}\n\n.footer {\n  position: absolute;\n  width: 100%;\n  left: 10px;\n  bottom : 9px;\n  display: flex;\n  z-index: 1;\n}\n.about-link {\n  background: rgba(177, 197, 163, 0.50);\n  padding: 5px 10px;\n  margin-right: 5px;\n  border-radius: 5%;\n  cursor: pointer;\n  z-index: 1;\n}\n\n.header {\n  position: absolute;\n  width: 100%;\n  left: 10px;\n  top : 10px;\n  display: flex;\n  z-index: 1;\n}\n\n.fetch-link,\n.login-link {\n  background: rgba(177, 197, 163, 0.50);\n  padding: 5px 10px;\n  margin-right: 5px;\n  border-radius: 5%;\n  cursor: pointer;\n  z-index: 1;\n}\n\n.fetch-link{\n  left: 40px;\n}\n\n/* Tooltip text */\n.header .tooltiptext {\n  visibility: hidden;\n  width: 120px;\n  background-color: gray;\n  opacity: 0.2;\n  color: #fff;\n  text-align: center;\n  padding: 5px 0;\n  border-radius: 6px;\n  cursor: pointer;\n \n  /* Position the tooltip text - see examples below! */\n  position: absolute;\n  top: 102%;\n  left: 2%; \n  z-index: 1;\n}\n\n/* Show the tooltip text when you mouse over the tooltip container */\n.header:hover .tooltiptext {\n  visibility: visible;\n}\n\n\n.copyText {\n  font-size: 9px;\n  color: #999;\n}\n\n</style>\n","import mod from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=a65f7e5c&\"\nimport script from \"./App.vue?vue&type=script&lang=js&\"\nexport * from \"./App.vue?vue&type=script&lang=js&\"\nimport style0 from \"./App.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import Vue from 'vue'\n\nimport App from './App.vue'\n \nVue.config.productionTip = false\n\nconst apiKey = process.env.VUE_APP_GAPI_API_KEY;\nconst clientId = process.env.VUE_APP_GAPI_CLIENT_ID;\n\nif (!apiKey || !clientId) {\n  throw new Error(\n    \"Has the .env.local file been setup? One or both variables are not set: VUE_APP_GAPI_API_KEY=\" +\n      apiKey +\n      \", VUE_APP_GAPI_CLIENT_ID=\" +\n      clientId\n  );\n}\n\nimport VueGAPI from 'vue-gapi'\n\nconst gAPIConfig = {\n  apiKey,\n  clientId,\n  scope: 'email profile https://www.googleapis.com/auth/gmail.readonly', \n  discoveryDocs: [ \"https://www.googleapis.com/discovery/v1/apis/gmail/v1/rest\" ]\n}\n\nVue.use(VueGAPI, gAPIConfig)\n\n\nwindow.Vue = new Vue({\n  render: h => h(App),\n}).$mount('#app')\n","/*eslint no-console: [\"error\", { allow: [\"warn\", \"error\"] }] */\n\nglobal.atob = require(\"atob\");\nvar stats = require(\"stats-lite\")\nvar HTMLParser = require('node-html-parser');\n// import { parse } from 'node-html-parser';\n\n\nfunction msgBinayDataToTxt(b64data)\n{\n  return atob(b64data.replace(/-/g, '+').replace(/_/g, '/'));\n}\n\nconst NULL_RIDE =  {taxi: '?', date: '?', date_email: '?',\n                    total: NaN, currency: '?',\n                    distance: NaN, distance_units: '?',\n                    time_minutes: NaN}\n\nexport \nfunction parseEmail(queryResult) {\n\n\n  if(! queryResult) return NULL_RIDE\n\n  let emailPayload = queryResult.payload\n  let emailDate = queryResult.internalDate\n\n  if(! emailPayload) return NULL_RIDE\n\n  //let's figure out whether we are dealing with a body or with parts!\n  if('body' in emailPayload && emailPayload.body.size > 0)\n  {\n    if(emailPayload.mimeType == null)\n    {\n      console.error(\"This does not have a mimeType!\", emailPayload)\n      return NULL_RIDE\n    }\n    return parseEmail_(msgBinayDataToTxt(emailPayload.body.data),\n                       emailPayload.mimeType,\n                       emailDate)\n  }\n  else if('parts' in emailPayload && 'body' in emailPayload.parts[0])\n  {\n    //look for the html or plain one\n    var part = emailPayload.parts.find(p => p.mimeType == 'text/html' || p.mimeType == 'text/plain');\n    if(part) {\n      return parseEmail_(msgBinayDataToTxt(part.body.data), \n                         part.mimeType,\n                         emailDate)\n    } else {\n      console.warn('did not find any data in this email ??', emailPayload)\n    }\n  }\n\n\n  return NULL_RIDE\n}\n\n\nfunction parseEmail_(emailBody, mimeType, emailDate)\n{\n  //If Html, parse it and get structured text out of it\n  if (mimeType.includes('html')) {\n    emailBody = HTMLParser.parse(emailBody).structuredText\n  }\n\n  let taxiRide = null\n\n  if(emailBody.includes('Lyft') || emailBody.includes('lyft')) {\n    taxiRide = parse_Lyft(emailBody)\n  } else {\n    taxiRide = parse_Uber(emailBody)\n  }\n\n  unifyUnits(taxiRide, emailDate)\n\n  return taxiRide\n}\n\nfunction unifyUnits(ride, emailDate)\n{\n  //start with date\n  try {\n      ride.date_email = new Date(parseInt(emailDate))\n  } catch(e) {\n    console.error('failed to convert email date!', emailDate, e)\n  }\n  //force date to be email date!\n  if (ride.date == '?') {\n    ride.date = ride.date_email\n  } else {\n    ride.date = new Date(Date.parse(ride.date))\n  }\n\n  //start by distance\n  let dist_conv = -1\n  switch (ride.distance_units) {\n    case 'mi':\n    case 'Mi':\n    case 'MI':\n    case 'miles':\n    case 'Miles':\n        dist_conv = 1;\n        break;\n\n    case 'km':\n    case 'Km':\n    case 'KM':\n    case 'kilometers':\n    case 'Kilometers':\n    case 'kiloMeters':\n    case 'KiloMeters':\n        dist_conv = 0.621371;\n        break;\n\n    default:\n        console.warn('unkown distance unit ' + ride.distance_units)\n  }\n\n  let currency_conv = 0\n  ride.currency = ride.currency.replace(':','').trim()\n  switch (ride.currency) {\n    case '$':\n    case 'USD':\n    case 'US$':\n        currency_conv = 1; break;\n\n    case 'CA$':\n    case 'CAD':\n        currency_conv = 0.77; break;\n\n    case 'NZ':\n    case 'Nz':\n    case 'NZ$':\n    case 'NZD':\n        currency_conv = 0.68; break;\n\n    case '£':\n    case 'Â£':\n    case 'GBP':\n        currency_conv = 1.25; break\n\n    case 'A$':\n    case 'AUD':\n        currency_conv = 0.71; break;  \n\n    case 'EUR':\n    case 'â¬':\n        currency_conv = 1.13; break;  \n\n    case 'Rs':\n        currency_conv = 0.0057; break;\n\n\n    default:\n        console.warn('unkown currency unit ' + ride.currency)\n  }\n\n  ride.distance_miles = ride.distance * dist_conv\n  ride.total_usd = ride.total * currency_conv\n\n  ride.usd_per_mile = ride.total_usd / ride.distance_miles\n}\n// ************************************************************\n// ************************************************************\n                function parse_Lyft(emailBody)\n// ************************************************************\n// ************************************************************\n{\n  let lyftRide = Object.assign({}, NULL_RIDE)\n  lyftRide.taxi = 'Lyft'\n\n  try {\n    try { //if the expensify string is there, get it!\n      let r = /(\\d{4}-\\d{1,2}-\\d{1,2}) ([A-z]*) ((?:\\d*[.])?\\d+) Taxi/\n      let match = r.exec(emailBody);\n      lyftRide.date = match[1]\n      lyftRide.currency = match[2]\n      lyftRide.total = parseFloat(match[3])\n\n      //Odd, Lyft receipt sometimes is missing the decimal point\n      if (!match[3].includes('.')) lyftRide.total /= 100\n\n    } catch { //otherwise fall back to manual stuff\n      try {\n        let r = /(\\w+\\s+\\d{1,2},\\s+\\d{4})/\n        let match = r.exec(emailBody)\n        lyftRide.date = new Date(Date.parse(match[1])).toISOString().split('T')[0]\n      } catch { //nodate (well, no year), we will keep date unchanged\n        // lyftRide.date = '?' \n      }\n\n      //ugh - hacky :s\n      try {\n        r = /([A-z]*\\W*[A-z]*)((?:\\d*[.])?\\d+)\\W+Pickup/\n        match = r.exec(emailBody)\n        lyftRide.currency = match[1]\n        lyftRide.total = parseFloat(match[2])\n      } catch {\n        r = /(?:Sub)?[T|t]otal(?: Fare| charged .+:)?\\s*([A-z]*\\W*[A-z]*)((?:\\d*[.])?\\d+)/\n        match = r.exec(emailBody)\n        lyftRide.total = parseFloat(match[2])\n        lyftRide.currency = match[1]\n      }\n    }\n\n    //get ride stats\n    let r = /((?:\\d*[.])?\\d+)\\s?(mi|km)\\W+(?:(\\d+)h)?\\s?(?:(\\d+)m)?\\s?(?:(\\d+)s)?/\n    let match = r.exec(emailBody)\n    lyftRide.distance = parseFloat(match[1])\n    lyftRide.distance_units = match[2]\n\n    let time_minutes = 0\n    if(match[3]) time_minutes += parseFloat(match[3])*60\n    if(match[4]) time_minutes += parseFloat(match[4])\n    if(match[5]) time_minutes += parseFloat(match[5])/60\n    lyftRide.time_minutes = time_minutes\n  }\n  catch (error){\n    if(emailBody.includes('Lyft Line Discount'))\n    {\n      //lyft doesn't include mileage / time stats when lyft line?\n      lyftRide.distance_units = 'mi'\n      lyftRide.time_minutes = lyftRide.distance = NaN\n    }\n    else\n    {\n      console.warn('failed parsing a Lyft message!', emailBody, error)\n    }\n  }\n\n  // if(lyftRide.date == '2017-06-22')\n  // {\n  //   console.log(emailBody)\n  // }\n\n  return lyftRide\n\n}\n// ************************************************************\n// ************************************************************\n                  function parse_Uber(emailBody)\n// ************************************************************\n// ************************************************************\n{\n\n  let uberRide = Object.assign({}, NULL_RIDE)\n  uberRide.taxi = 'Uber'\n  try {\n    let r = /(\\d+-\\d+-\\d+) ([A-z]*) ((?:\\d*[.])?\\d+) Taxi/\n    let match = r.exec(emailBody);\n    uberRide.date = match[1]\n    uberRide.currency = match[2]\n    uberRide.total = parseFloat(match[3])\n  }\n  catch (error1) { \n  try {\n    // See Example here https://regexr.com/4hnc5\n    //first get the total\n    let r = /(?:Sub)?[T|t]otal(?: Fare| charged .+:)?\\s*([A-z]*\\W*[A-z]*)((?:\\d*[.])?\\d+)/\n    let match = r.exec(emailBody)\n    uberRide.total = parseFloat(match[2])\n    uberRide.currency = match[1]\n \n\n    //next get the distance\n    try { //old style?\n      r = /Distance[\\W]+((?:\\d*[.])?\\d+)[\\s]+([A-z]+)\\n/\n      match = r.exec(emailBody)\n      uberRide.distance = parseFloat(match[1])\n      uberRide.distance_units = match[2]\n\n      //get the time of the trip\n      r = /Duration[\\W]+(?:(\\d+)[\\s]hours)?(?:[\\W]+)?(?:(\\d+)[\\s]minutes)?(?:[\\W]+)?(?:(\\d+)[\\s]seconds)?/\n      match = r.exec(emailBody)\n      let time_minutes = 0\n      if(match[1]) time_minutes += parseFloat(match[1])*60\n      if(match[2]) time_minutes += parseFloat(match[2])\n      if(match[3]) time_minutes += parseFloat(match[3])/60\n      uberRide.time_minutes = time_minutes \n    } catch { //New style ??\n    try {\n      //next get the time and distance\n      // eslint-disable-next-line \n      r = /((?:\\d*[.])?\\d+)\\s+([A-z]+)\\s?[\\||&]\\s?(?:(\\d+)\\s+h)?\\s?(?:(\\d+)\\s+min)?\\s?(?:(\\d+)\\s+s)?/\n      match = r.exec(emailBody)\n      uberRide.distance = parseFloat(match[1])\n      uberRide.distance_units = match[2]\n      uberRide.time_minutes = match[3]\n    } catch { //Europe ?\n      //next get the time and distance\n      r = /((?:\\d*[.])?\\d+)\\W+(kilometers|miles)\\W+(\\d+:\\d+:\\d+)/\n      match = r.exec(emailBody)\n      uberRide.distance = parseFloat(match[1])\n      uberRide.distance_units = match[2]\n\n      let time_minutes = 0\n      if(match[3]) time_minutes += parseFloat(match[3])*60\n      if(match[4]) time_minutes += parseFloat(match[4])\n      if(match[5]) time_minutes += parseFloat(match[5])/60\n      uberRide.time_minutes = time_minutes\n    }\n    }\n\n    //finally get the date of the trip\n    try{\n      r = /Trip Request Date[\\W]+(\\w+\\s+\\d{1,2},\\s+\\d{4})/\n      match = r.exec(emailBody)\n      uberRide.date = new Date(Date.parse(match[1])).toISOString().split('T')[0]\n    }\n    catch {\n      //one last try for the date ..\n      try\n      {\n        r = /(\\w+\\s+\\d{1,2},\\s+\\d{4})/\n        match = r.exec(emailBody)\n        uberRide.date = new Date(Date.parse(match[1])).toISOString().split('T')[0]\n      // eslint-disable-next-line \n      } catch {}\n    }\n\n  } catch (error2){\n      if(!emailBody.includes('trip is canceled') && \n         !emailBody.includes('Previous Charge')) \n      {\n        console.warn('failed parsing this Uber message!', emailBody, error2)\n      }\n    }\n  }//2nd catch \n\n  // if(uberRide.distance_units.includes('Time'))\n  // {\n  //   console.log(emailBody)\n  // }\n\n  return uberRide\n}\n\n\n\nexport function lumpRides(newRides, lumpedRides)\n{\n  //push new vals into the accumulator\n  for(let i = 0; i < newRides.length; ++i)\n  {\n    let thisRide = newRides[i];\n    let midMonth_time = new Date(Date.parse(thisRide.date.getFullYear()+'-'+(thisRide.date.getMonth()+1)+'-15'));\n    midMonth_time = midMonth_time.getTime();\n\n    [thisRide.taxi, 'Uber+Lyft'].forEach(taxi => { \n      if(!(taxi in lumpedRides)){\n        lumpedRides[taxi] = {}\n      } \n\n      if(!(midMonth_time in lumpedRides[taxi]))\n      {\n        lumpedRides[taxi][midMonth_time] = {distance_miles: [thisRide.distance_miles],\n                                      total_usd: [thisRide.total_usd],\n                                      usd_per_mile: [thisRide.usd_per_mile]}\n      } else {\n        ['distance_miles', 'total_usd', 'usd_per_mile'].forEach(k => {\n          lumpedRides[taxi][midMonth_time][k].push(thisRide[k])\n        })\n      }\n    })\n  }\n\n  //recompute stats\n  void ['Uber', 'Lyft', 'Uber+Lyft'].forEach(taxi => {\n    if(lumpedRides[taxi]){\n      for (let month in lumpedRides[taxi])\n      {\n        ['distance_miles', 'total_usd', 'usd_per_mile'].forEach(k => {\n\n            lumpedRides[taxi][month][k+'_mu'] = stats.mean(lumpedRides[taxi][month][k])\n            lumpedRides[taxi][month][k+'_sigma'] = stats.stdev(lumpedRides[taxi][month][k])\n            lumpedRides[taxi][month][k+'_mu_sigma'] = lumpedRides[taxi][month][k+'_sigma']/lumpedRides[taxi][month][k].length\n          })\n      }\n    }\n  })\n  // console.log(lumpedRides)\n\n}\n\n// // var body64 = \"\"\n// var body64 = \"CgoKClJlY2VpcHQKClRoYW5rcyBmb3IgcmlkaW5nIFViZXIhCgpCaWxsZWQgVG86IFpvdWhhaXIgTWFoYm91YmkKCkRyaXZlcjogQWJyYWhhbQoKClRyaXAgUmVxdWVzdCBEYXRlOgogICAgRGVjZW1iZXIgIDEsIDIwMTMgYXQgMDg6MjFwbQpQaWNrdXAgTG9jYXRpb246CiAgICAxNTUwLTE1NzIgQWlycG9ydCBCb3VsZXZhcmQsIE1pbmV0YSBTYW4gSm9zZSBJbnRlcm5hdGlvbmFsIEFpcnBvcnQgKFNKQyksIFNhbiBKb3NlLCBDQQoKRHJvcG9mZiBMb2NhdGlvbjoKICAgIDI1NjE3IEVsZW5hIFJvYWQsIExvcyBBbHRvcyBIaWxscywgQ0EKClBheW1lbnQ6CiAgICBHb29nbGUgV2FsbGV0CgoKRkFSRSBCUkVBS0RPV04KCiAgICBDaGFyZ2VzCiAgICAgICAgQmFzZSBGYXJlOiAgICAkMy41MAogICAgICAgIERpc3RhbmNlOiAgICAkNDQuMTEKICAgICAgICBUaW1lOiAgICAkMS4xNgogICAgICAgIENoYXJnZSBzdWJ0b3RhbDogICAgJDQ4Ljc3CgogICAgRGlzY291bnRzCiAgICAgICAgUm91bmRpbmcgRG93bjogICAgKCQwLjc3KQogICAgICAgIFNWTE9WRVN1YmVyWCAoJDMwIG9mZiBTaWxpY29uIFZhbGxleSB0cmlwcykuIE9mZmVyIHZhbGlkIG9ubHkgb24gdWJlclggdHJpcHMgMTEuMjUuMTMgLSAxMi4xLjEzOiAgICAoJDMwLjAwKQogICAgICAgIERpc2NvdW50IHN1YnRvdGFsOiAgICAoJDMwLjc3KQoKCiAgICBUb3RhbHMKICAgICAgICBUb3RhbCBGYXJlOiAgICAkMTguMDAKICAgICAgICBBbW91bnQgQ2hhcmdlZDogICAgKCQxOC4wMCkKICAgICAgICBPdXRzdGFuZGluZyBCYWxhbmNlOiAgICAkMC4wMAoKVFJJUCBTVEFUSVNUSUNTCgpEaXN0YW5jZTogICAgMTYuMTggbWlsZXMKCkR1cmF0aW9uOiAgICAxOSBtaW51dGVzLCAzIHNlY29uZHMKCkF2ZXJhZ2UgU3BlZWQ6ICAgIDUwLjk3IG1pbGVzIHBlciBob3VyCgpOZWVkIHN1cHBvcnQ_IFJlcGx5IHRvIHRoaXMgcmVjZWlwdC4KClZpZXcgdGhpcyB0cmlwIG9ubGluZTogaHR0cHM6Ly9jbGllbnRzLnViZXIuY29tLyMhL3RyaXAvcGNtcmRnamkKeGlkcGNtcmRnamkKCiAgICBVYmVyIFRlY2hub2xvZ2llcywgSW5jLgogICAgMTgyIEhvd2FyZCBTdCAjOAogICAgU2FuIEZyYW5jaXNjbywgQ0EgOTQxMDIK\"\n// var resb = {body: {data: body64, size:1}}\n// console.log(parseEmail(resb))\n\n// let res = `Receipt\n\n// Thanks for riding Uber!\n\n// Billed To: Zouhair Mahboubi\n\n// Driver: joseph\n\n\n\n// Trip Request Date:\n//     October 24, 2013 at 07:01pm\n// Pickup Location:\n//     342 Townsend Street, San Francisco, CA\n\n// Dropoff Location:\n//     355-415 Van Ness Avenue, San Francisco, CA\n\n// Credit Card:\n//     Google Wallet\n\n//     Notes\n//     This trip has an increased fare because it was taken while surge pricing was in effect.\n\n// FARE BREAKDOWN\n\n//     Charges\n//         Base Fare:    $3.50\n//         Distance:    $4.04\n//         Time:    $4.21\n//         Surge x1.5:    $5.88\n//         Charge subtotal:    $17.63\n\n//     Discounts\n//         Rounding Down:    ($0.63)\n//         Discount subtotal:    ($0.63)\n\n\n//     Totals\n//         Total Fare:    $17.00\n//         Billed to Card:    ($17.00)\n//         Outstanding Balance:    $0.00\n\n// TRIP STATISTICS\n\n// Distance:    1.88 miles\n\n// Duration:    11 minutes, 55 seconds\n\n// Average Speed:    9.46 miles per hour\n\n// Need support? Reply to this receipt.\n\n// View this trip online: https://clients.uber.com/#!/trip/hu7wsedf\n// xidhu7wsedf\n\n//     Uber Technologies, Inc.\n//     182 Howard St #8\n//     San Francisco, CA 94102`\n\n// console.log(parse_Uber(res))\n\n\n\n\n","import mod from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GraphPage.vue?vue&type=style&index=0&id=01a99176&scoped=true&lang=css&\"; export default mod; export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GraphPage.vue?vue&type=style&index=0&id=01a99176&scoped=true&lang=css&\""],"sourceRoot":""}